(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{393:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"array-dumping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-dumping"}},[t._v("#")]),t._v(" Array Dumping")]),t._v(" "),a("p",[t._v("The array dumper allows you to serialize an array into different stringified formats.")]),t._v(" "),a("h2",{attrs:{id:"dumptojson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dumptojson"}},[t._v("#")]),t._v(" dumpToJson()")]),t._v(" "),a("p",[t._v("Dumps the given array as JSON string.\nSimply a wrapper around json_encode to throw errors if the encoding fails.")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Arguments")]),t._v(" "),a("ul",[a("li",[t._v("pretty    If set to TRUE the JSON will be generated pretty printed")]),t._v(" "),a("li",[t._v("options   Bitmask consisting of one or multiple of the JSON_ constants. The behaviour of these constants is described on the JSON constants page. JSON_THROW_ON_ERROR is set by default for all operations")]),t._v(" "),a("li",[t._v("depth     User specified recursion depth.")])])]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'foo'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'bar'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'baz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dumpToJson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {"foo":"bar","bar":"baz"}')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dumpToJson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'pretty'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "foo": "bar",')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "bar": "baz"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"dumptoxml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dumptoxml"}},[t._v("#")]),t._v(" dumpToXml()")]),t._v(" "),a("p",[t._v("[WIP] This is the counterpart of Arrays::makeFromXml() which takes it's output\nand converts it back into a stringified XML format.")]),t._v(" "),a("p",[t._v("This method works, but is still considered work in progress! Use with care!")])])}),[],!1,null,null,null);s.default=e.exports}}]);