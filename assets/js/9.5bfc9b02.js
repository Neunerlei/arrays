(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{394:function(t,a,s){"use strict";s.r(a);var e=s(54),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"array-generation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-generation"}},[t._v("#")]),t._v(" Array Generation")]),t._v(" "),s("p",[t._v("Arrays can be serialized and unserialized into and from a variety of different formats. The array generation part of the library gives you some tools for the most commonly used formats.")]),t._v(" "),s("h2",{attrs:{id:"makefromxml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefromxml"}},[t._v("#")]),t._v(" makeFromXml()")]),t._v(" "),s("p",[t._v("Receives a xml-input and converts it into a multidimensional array.\nThe core of the method is heavily inspired (*cough*) by "),s("a",{attrs:{href:"https://github.com/cakephp/utility/blob/master/Xml.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("CakePhp's XML implementation"),s("OutboundLink")],1),t._v("\nwith a few extra twirks to make it more convenient.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("It accepts either an XML String (With or without header), a DOMNode or a SimpleXMLElement as an input. The output is an array containing\na list of nodes that may have one of four types of children:")]),t._v(" "),s("ul",[s("li",[t._v('"tag": Describes the tag of the node')]),t._v(" "),s("li",[t._v('"@attr": The name of an attribute and it\'s value with an "@" to describe it')]),t._v(" "),s("li",[t._v('"content": The content value of the node as a string.')]),t._v(" "),s("li",[t._v('"childNode": Has a numeric index and contains nested nodes of the current node.')])])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v('The generation of "associative" arrays based on xml\'s is currently a feature in active development.\nIt might change in the future. Suggestions are welcome.')])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("Arguments")]),t._v(" "),s("ul",[s("li",[t._v("$input The xml source to convert into an array")]),t._v(" "),s("li",[t._v("$asAssocArray If this is set to true the result object is converted to a more readable associative array. Be careful with this! There might be sideEffects, like changing paths when the result array has a changing number of nodes.")])])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromXml")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"<body><node>foo</node><node>bar</node></body>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromXml")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleXMLElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"makefromobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefromobject"}},[t._v("#")]),t._v(" makeFromObject()")]),t._v(" "),s("p",[t._v("The method receives an object of any kind and converts it into a multidimensional array")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Tests"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Assets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("DummyClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Tests"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Assets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("DummyIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DummyIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["foo" => "bar", "true" => TRUE]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DummyClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["foo" => true, "bar" => "baz"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleXMLElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The same output as makeFromXml() would give you")]),t._v("\n")])])]),s("h2",{attrs:{id:"fromstringlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fromstringlist"}},[t._v("#")]),t._v(" fromStringList()")]),t._v(" "),s("p",[t._v('Receives a string list like: "1,asdf,foo, bar" which will be converted into [1, "asdf", "foo", "bar"]\nNote the automatic trimming and value conversion of numbers, TRUE, FALSE an null.\nBy default the separator is ",". All separators can be escaped using "\\"')]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("Arguments")]),t._v(" "),s("ul",[s("li",[t._v("$input     The value to convert into an array")]),t._v(" "),s("li",[t._v("$separator The separator to split the string at")])])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromStringList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"abc,foo,bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["abc", "foo", "bar"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromStringList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"foo\\\\,bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["foo,bar"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromStringList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"true,FALSE,TRUE,1,0,NULL,123"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [TRUE, FALSE, TRUE, 1, 0, NULL, 123]")]),t._v("\n")])])]),s("h2",{attrs:{id:"makefromcsv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefromcsv"}},[t._v("#")]),t._v(" makeFromCsv()")]),t._v(" "),s("p",[t._v("Receives a string value and parses it as a csv into an array.")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("Arguments")]),t._v(" "),s("ul",[s("li",[t._v("$input         The csv string to parse")]),t._v(" "),s("li",[t._v("$firstLineKeys Set to true if the first line of the csv are keys for all other rows")]),t._v(" "),s("li",[t._v("$delimiter     The delimiter between multiple fields")]),t._v(" "),s("li",[t._v("$quote         The enclosure or quoting tag")])])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"a,b,c\nd,e,f"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromCsv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [["a", "b", "c"], ["d", "e", "f"]]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromCsv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [["a" => "d", "b" => "e", "c" => "f"]]')]),t._v("\n")])])]),s("h2",{attrs:{id:"makefromjson"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefromjson"}},[t._v("#")]),t._v(" makeFromJson()")]),t._v(" "),s("p",[t._v("Creates an array out of a json data string. Throws an exception if an error occurred!\n"),s("strong",[t._v("Only works with json objects or arrays. Other values will throw an exception!")])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeFromJson")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"[123,\\"foo\\",\\"bar\\"]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [123, "foo", "bar"]')]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);